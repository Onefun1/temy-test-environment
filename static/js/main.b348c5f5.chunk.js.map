{"version":3,"sources":["dataFromServer.js","UserBase.js","App.js","index.js"],"names":["BASE_URL","UserBase","props","_props$state","state","users","states","countries","cities","data","react_default","a","createElement","className","map","user","key","concat","name","email","phone_number","date","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","_this$state","selectCountriesRef","current","value","selectStatesRef","parentElement","hidden","filteredStatesById","toConsumableArray","filter","country_id","setState","selectCitiesRef","filteredCitiesById","city","state_id","userAdress","inputAdressRef","aboutUser","inputAboutRef","newUser","inputNameRef","inputEmailRef","inputPhoneRef","address","about_me","city_id","handleSubmit","event","fetch","method","headers","Accept","Content-Type","body","JSON","stringify","then","res","json","console","log","catch","err","today","Date","getFullYear","getMonth","getDate","isLoading","React","createRef","response","_this2","_this$state2","onChange","onSubmit","type","required","placeholder","pattern","autoComplete","ref","length","country","id","hasc","maxLength","rows","style","resize","UserBase_UserBase","Component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.b348c5f5.chunk.js","sourcesContent":["const BASE_URL = \"http://localhost:8000/\";\n\nexport const getCities = () => {\n  return fetch(`${BASE_URL}cities`)\n    .then(response => response.json())\n    .then(data => data);\n};\nexport const getCountries = () => {\n  return fetch(`${BASE_URL}countries`)\n    .then(response => response.json())\n    .then(data => data);\n};\nexport const getStates = () => {\n  return fetch(`${BASE_URL}states`)\n    .then(response => response.json())\n    .then(data => data);\n};\nexport const getUsers = () => {\n  return fetch(`${BASE_URL}users`)\n    .then(response => response.json())\n    .then(data => data);\n};\n\n// const fetchData = path => {\n//   const BASE_URL = \"http://localhost:3000/\";\n\n//   const base = Promise.all([\n//     fetch(`${BASE_URL}cities`),\n//     fetch(`${BASE_URL}countries`),\n//     fetch(`${BASE_URL}states`),\n//     fetch(`${BASE_URL}users`)\n//   ])\n//     .then(allResponses => {\n//       let cities = allResponses[0].json();\n//       let countries = allResponses[1].json();\n//       let states = allResponses[2].json();\n//       let users = allResponses[3].json();\n//       console.log(cities, countries, states, users);\n//     })\n//     .catch(error => console.log(\"parsing failed\", error));\n//   console.log(base);\n// };\n","import React from \"react\";\n\nexport const UserBase = props => {\n  const { users, states, countries, cities, data } = props.state;\n\n  return (\n    <div className=\"app container\">\n      {users.map(user => {\n        return (\n          <div\n            className=\"container__user-block\"\n            key={`${user.name}${user.email}`}\n          >\n            <p>\n              Name: <span> {user.name}</span>\n            </p>\n            <p>\n              Email: <span>{user.email}</span>{\" \"}\n            </p>\n            <p>\n              Phone number: <span>{user.phone_number}</span>{\" \"}\n            </p>\n            <p>\n              Location:{\" \"}\n              {/* <span>\n                {countries[user.country_id - 1].name},{\" \"}\n                {states[user.state_id - 1].name},{\" \"}\n                {cities[user.city_id - 1].name}\n              </span>{\" \"} */}\n            </p>\n            <p>\n              Creation date: <span>{user.date}</span>\n            </p>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport { getCities, getCountries, getUsers, getStates } from \"./dataFromServer\";\nimport { UserBase } from \"./UserBase\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    let today = new Date();\n    let date =\n      today.getFullYear() +\n      \"-\" +\n      (today.getMonth() + 1) +\n      \"-\" +\n      today.getDate();\n    this.state = {\n      isLoading: false,\n      cities: {},\n      countries: {},\n      users: {},\n      states: {},\n      date: date\n    };\n\n    this.selectCountriesRef = React.createRef();\n    this.selectStatesRef = React.createRef();\n    this.selectCitiesRef = React.createRef();\n    this.inputNameRef = React.createRef();\n    this.inputEmailRef = React.createRef();\n    this.inputAdressRef = React.createRef();\n    this.inputAboutRef = React.createRef();\n    this.inputPhoneRef = React.createRef();\n  }\n\n  async componentDidMount() {\n    const cities = await getCities();\n    const countries = await getCountries();\n    const users = await getUsers();\n    const states = await getStates();\n\n    this.setState({\n      isLoading: true,\n      cities,\n      countries,\n      users,\n      states\n    });\n  }\n\n  handleChange = () => {\n    const { cities, states, date } = this.state;\n\n    if (this.selectCountriesRef.current.value) {\n      this.selectStatesRef.current.parentElement.hidden = false;\n      const filteredStatesById = [...states].filter(state => {\n        return state.country_id === this.selectCountriesRef.current.value;\n      });\n      this.setState({\n        states: filteredStatesById\n      });\n    } else {\n      this.selectStatesRef.current.parentElement.hidden = true;\n      this.selectStatesRef.current.value = null;\n    }\n    if (this.selectStatesRef.current.value) {\n      this.selectCitiesRef.current.parentElement.hidden = false;\n\n      const filteredCitiesById = [...cities].filter(city => {\n        return city.state_id === this.selectStatesRef.current.value;\n      });\n      this.setState({\n        cities: filteredCitiesById\n      });\n    } else {\n      this.selectCitiesRef.current.parentElement.hidden = true;\n      this.selectCitiesRef.current.value = null;\n    }\n    const userAdress =\n      this.inputAdressRef.current.value === \"\"\n        ? null\n        : this.inputAdressRef.current.value;\n    const aboutUser =\n      this.inputAboutRef.current.value === \"\"\n        ? null\n        : this.inputAboutRef.current.value;\n\n    let newUser = {\n      name: this.inputNameRef.current.value,\n      email: this.inputEmailRef.current.value,\n      phone_number: this.inputPhoneRef.current.value,\n      address: userAdress,\n      about_me: aboutUser,\n      country_id: this.selectCountriesRef.current.value,\n      state_id: this.selectStatesRef.current.value,\n      city_id: this.selectCitiesRef.current.value,\n      date: date\n    };\n\n    this.setState({\n      newUser\n    });\n  };\n\n  handleSubmit = event => {\n    // event.preventDefault();\n    // alert(\"A list was submitted: \" + this.state.newUser);\n\n    return fetch(\"http://localhost:8000/users\", {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(this.state.newUser)\n    })\n      .then(res => res.json())\n      .then(data => console.log(data))\n      .then(user => {\n        this.setState({\n          users: [...this.state.users, user]\n        });\n      })\n      .catch(err => console.log(\"ERROR POST\", err));\n  };\n\n  render() {\n    const { countries, cities, states, isLoading } = this.state;\n    return (\n      <div>\n        <div className=\"app\">\n          <h3>Registration</h3>\n          <form\n            // action=\"http://localhost:3000/users\"\n            // method=\"post\"\n            onChange={() => this.handleChange()}\n            onSubmit={this.handleSubmit}\n          >\n            <div className=\"group\">\n              <input\n                type=\"text\"\n                name=\"name\"\n                required\n                placeholder=\"Enter your firstName and lastName (Xxxxx Xxxxx)\"\n                pattern=\"[A-Z]{1}[a-z]{1,30}\\s[A-Z]{1}[a-z]{1,30}\"\n                autoComplete=\"off\"\n                ref={this.inputNameRef}\n              />\n              <span className=\"bar\" />\n              <label>&#8593; Name *</label>\n            </div>\n            <div className=\"group\">\n              <input\n                type=\"email\"\n                name=\"email\"\n                required\n                placeholder=\"Enter your email\"\n                autoComplete=\"off\"\n                ref={this.inputEmailRef}\n              />\n              <span className=\"bar\" />\n              <label>&#8593; Email *</label>\n            </div>\n            <div className=\"group\">\n              <select name=\"country_id\" required ref={this.selectCountriesRef}>\n                <option />\n                {isLoading && countries.length > 0\n                  ? countries.map(country => {\n                      return (\n                        <option key={country.id} value={country.id}>\n                          {country.name}\n                        </option>\n                      );\n                    })\n                  : null}\n              </select>\n              <label>&#8593; Country *</label>\n            </div>\n            <div className=\"group\" hidden>\n              <select name=\"state_id\" required ref={this.selectStatesRef}>\n                <option />\n                {isLoading && states.length > 0\n                  ? states.map(state => {\n                      return (\n                        <option\n                          key={`${state.id}${state.hasc}`}\n                          value={state.id}\n                        >\n                          {state.name}\n                        </option>\n                      );\n                    })\n                  : null}\n              </select>\n              <label>&#8593; State *</label>\n            </div>\n            <div className=\"group\" hidden>\n              <select name=\"city_id\" required ref={this.selectCitiesRef}>\n                <option />\n                {isLoading && cities.length > 0\n                  ? cities.map(city => {\n                      return (\n                        <option key={`${city.id}${city.hasc}`} value={city.id}>\n                          {city.name}\n                        </option>\n                      );\n                    })\n                  : null}\n              </select>\n              <label>&#8593; City *</label>\n            </div>\n            <div className=\"group\">\n              <input\n                type=\"tel\"\n                name=\"phone\"\n                required\n                placeholder=\"Enter your phone number 38xxxxxxxxxx\"\n                pattern=\"[0-9]{12}\"\n                maxLength=\"12\"\n                autoComplete=\"off\"\n                ref={this.inputPhoneRef}\n              />\n              <span className=\"bar\" />\n              <label>&#8593; Phone *</label>\n            </div>\n            <div className=\"group\">\n              <input\n                type=\"text\"\n                placeholder=\"Enter your address\"\n                autoComplete=\"off\"\n                ref={this.inputAdressRef}\n              />\n              <span className=\"bar\" />\n              <label>&#8593; Address</label>\n            </div>\n            <div className=\"group\">\n              <textarea\n                name=\"about_me\"\n                rows=\"1\"\n                maxLength=\"500\"\n                style={{ resize: \"none\" }}\n                ref={this.inputAboutRef}\n              />\n              <span className=\"bar\" />\n              <label>&#8593; About me</label>\n            </div>\n            <input className=\"button\" type=\"submit\" value=\"Submit\" />\n          </form>\n        </div>\n        {isLoading ? <UserBase state={this.state} /> : \"\"}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}